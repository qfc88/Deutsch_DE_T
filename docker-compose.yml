version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: job-scraper-db
    environment:
      POSTGRES_DB: job_market_data
      POSTGRES_USER: jobscraper
      POSTGRES_PASSWORD: working
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./init-users.sql:/docker-entrypoint-initdb.d/02-init-users.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jobscraper -d job_market_data"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - scraper-network

  # Job Scraper Application
  job-scraper:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: job-scraper-app
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: job_market_data
      DB_USER: jobscraper
      DB_PASSWORD: working
      
      # Application configuration
      ENVIRONMENT: production
      PYTHONPATH: /app/src
      
      # Browser configuration for Docker
      DISPLAY: :99
      
      # Scraper settings - 4 CORE/8GB SERVER OPTIMIZED
      SCRAPER_HEADLESS: "true"
      SCRAPER_BATCH_SIZE: 25              # Optimized for 4 cores
      MAX_JOBS_PER_SESSION: 1000          # Higher limit for 8GB RAM
      
      # Enable V2 automation mode with enhanced features
      AUTOMATION_MODE: "true"
      AUTO_SOLVE_CAPTCHA: "true"
      PIPELINE_VERSION: "v2"
      ENABLE_COMPREHENSIVE_VALIDATION: "true"
      ENABLE_ENHANCED_CLEANING: "true"
      ENABLE_SINGLE_DB_LOAD: "true"
      ENABLE_REALTIME_ENHANCEMENT: "true"
      
    volumes:
      - ./data:/app/data
      - scraper_logs:/app/data/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scraper-network
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.0'
        reservations:
          memory: 3G
          cpus: '1.5'

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    container_name: job-scraper-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - scraper-network
    profiles:
      - admin

  # Optional: Monitoring with simple HTTP server
  monitor:
    build: 
      context: .
      dockerfile: Dockerfile.monitor
    container_name: job-scraper-monitor
    ports:
      - "9000:9000"
    volumes:
      - ./data:/app/data:ro
      - scraper_logs:/app/logs:ro
    networks:
      - scraper-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  scraper_logs:
    driver: local

networks:
  scraper-network:
    driver: bridge